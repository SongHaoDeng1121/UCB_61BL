package deque;


import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class ArrayDeque61B<T> implements Deque61B<T> {
    private T[] item;
    private int size;
    private int nextFirst;
    private int nextLast;
    private static final int MIN_CAPACITY_THRESHOLD = 16;


    public ArrayDeque61B() {
        //starting size; look for the item
        item = (T[]) new Object[8];
        size = 0;
        nextFirst = 7;
        nextLast = 0;

    }

    @Override
    public void addFirst(T x) {
        if (size == item.length) {
            resize(item.length * 2);
        }
        item[nextFirst] = x;
        nextFirst = Math.floorMod(nextFirst - 1, item.length);
        size++;

    }

    @Override
    public void addLast(T x) {
        if (size == item.length) {
            resize(item.length * 2);
        }
        item[nextLast] = x;
        nextLast = Math.floorMod(nextLast + 1, item.length);
        size++;
    }

    @Override
    public List<T> toList() {
        List<T> result = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            int realIndex = Math.floorMod(nextFirst + 1 + i, item.length);
            result.add(item[realIndex]);
        }
        return result;
    }

    @Override
    public boolean isEmpty() {
        if (size == 0) {
            return true;
        }
        return false;
    }

    @Override
    public int size() {
        return size;
    }

    @Override
    public T removeFirst() {
        if (isEmpty()) {
            return null;
        }

        nextFirst = Math.floorMod(nextFirst + 1, item.length);
        T removedItem = item[nextFirst];
        item[nextFirst] = null;
        size--;

        if (item.length >= MIN_CAPACITY_THRESHOLD && size < item.length / 4) {
            resize(item.length / 2);
        }
        return removedItem;
    }

    @Override
    public T removeLast() {
        if (isEmpty()) {
            return null;
        }
        nextLast = Math.floorMod(nextLast - 1, item.length);
        T removedItem = item[nextLast];
        item[nextLast] = null;
        size--;
        if (item.length >= MIN_CAPACITY_THRESHOLD && size < item.length / 4) {
            resize(item.length / 2);
        }
        return removedItem;
    }

    @Override
    public T get(int index) {
        if (index < 0 || index >= size) {
            return null;
        }
        int realIndex = Math.floorMod(nextFirst + 1 + index, item.length);
        return item[realIndex];
    }

    @Override
    public T getRecursive(int index) {
        throw new UnsupportedOperationException("No need to implement getRecursive for proj 1b");
    }

    public void resize(int capacity) {
        T[] newItems = (T[]) new Object[capacity];
        for (int i = 0; i < size; i++) {
            newItems[i] = item[Math.floorMod(nextFirst + 1 + i, item.length)];
        }
        item = newItems;
        nextFirst = capacity - 1;
        nextLast = size;
    }

    @Override
    public Iterator<T> iterator() {
        return new ArrayDequeIterator();
    }

    private class ArrayDequeIterator implements Iterator<T> {
        private int index;

        public ArrayDequeIterator() {
            index = 0;
        }

        @Override
        public boolean hasNext() {
            return index < size;
        }

        @Override
        public T next() {
            T result = get(index);
            index++;
            return result;
        }
    }

    @Override
    public boolean equals(Object o) {
        // @source This code was generated by ChatGPT. It reads and parses
        if (this == o) {
            return true;
        }

        if (!(o instanceof Deque61B<?>)) {
            return false;
        }

        Deque61B<?> other = (Deque61B<?>) o;
        if (this.size() != other.size()) {
            return false;
        }

        Iterator<T> thisIter = this.iterator();
        Iterator<?> otherIter = other.iterator();

        while (thisIter.hasNext() && otherIter.hasNext()) {
            T a = thisIter.next();
            Object b = otherIter.next();
            if (!a.equals(b)) {
                return false;
            }
        }

        return true;
    }


    @Override
    public String toString() {
        return this.toList().toString();
    }


}
